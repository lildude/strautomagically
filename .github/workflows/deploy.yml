name: Build and Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: [Test]
    types: [completed]
    branches: [main]

jobs:
  deploy:
    name: Build & Deploy to Staging
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required for actions/checkout
    environment: Staging
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - uses: actions/checkout@v3

    - name: Build
      if: github.ref == 'refs/heads/main'
      run: make build_azure

    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }} # Required to log in with OIDC
        tenant-id`: ${{ vars.AZURE_TENANT_ID }} # Required to log in with OIDC
        subscript`ion-id: ${{ vars.AZURE_SUBSCRIPTION_ID }} # Required to log in with OIDC

    - name: 'Deploy to Staging'
      uses: Azure/functions-action@v1
      id: fa
      with:
        app-name: ${{ secrets.FUNCTION_APP }}
        package: ${{ github.workspace }}
        slot-name: staging
        respect-funcignore: true

    - name: 'Check Deployment'
      run: |
        i=0
        while [ $i -le 10 ]; do
          sleep 10
          RESPONSE=$(curl -sv "${{ steps.fa.outputs.app-url }}/start" 2>&1 | grep Strautomagically-Version | cut -d' ' -f3)
          if [ "${RESPONSE//[$'\t\r\n']}" = "${GITHUB_SHA}" ]; then
            exit 0
          fi
          i=$((i+1))
        done
        echo "Failed to deploy."
        echo -e "Exp: ${GITHUB_SHA}\nGot: ${RESPONSE//[$'\t\r\n']}."
        exit 1

  release-to-prod:
    name: Release to Production
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Required for OIDC
      contents: read # Required for actions/checkout
    environment: Production
    steps:
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ vars.AZURE_CLIENT_ID }} # Required to log in with OIDC
        tenant-id: ${{ vars.AZURE_TENANT_ID }} # Required to log in with OIDC
        subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }} # Required to log in with OIDC

    - name: Swap Slots
      run: az functionapp deployment slot swap -s staging -n ${{ secrets.FUNCTION_APP }} -g ${{ secrets.FUNCTION_APP }}
